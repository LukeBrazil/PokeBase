{"version":3,"sources":["api/index.js","components/Card/MediaCard.jsx","components/AppBar/AppBar.jsx","App.js","reportWebVitals.js","index.js"],"names":["getAllPokemon","url","a","Promise","resolve","reject","fetch","then","res","json","data","getPokemon","useStyles","makeStyles","root","maxWidth","media","height","MediaCard","pokemon","classes","Card","className","CardActionArea","CardMedia","image","sprites","front_default","title","CardContent","Typography","gutterBottom","variant","component","name","id","color","types","map","type","abilities","ability","theme","flexGrow","menuButton","marginRight","spacing","ButtonAppBar","AppBar","position","Toolbar","App","useState","pokemonData","setPokemonData","nextPage","setNextPage","prevPage","setPrevPage","loading","setLoading","mainUrl","useEffect","response","next","previous","loadingPokemon","results","fetchData","fetchNext","fetchPrevious","goHome","all","pokemonRecord","singlePokemon","console","log","Button","onClick","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ca16a72.chunk.js","sourcesContent":["export async function getAllPokemon(url) {\n    return new Promise((resolve, reject) => {\n      fetch(url)\n        .then(res => res.json())\n        .then(data => {\n          resolve(data);\n        });\n    });\n  }\n  \n  export async function getPokemon(url) {\n      return new Promise((resolve, reject) => {\n          fetch(url)\n          .then(res => res.json())\n          .then(data => {\n              resolve(data);\n          })\n      })\n  }\n  ","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport './Styles.css'\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 140,\n  },\n});\n\nexport default function MediaCard( { pokemon }) {\n  const classes = useStyles();\n\n  return (\n    <Card className='card'>\n      <CardActionArea>\n        <CardMedia\n          className={classes.media}\n          image={pokemon.sprites.front_default}\n          title=\"Contemplative Reptile\"\n        />\n        <CardContent className='card'>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {pokemon.name}\n            <p>Id# {pokemon.id}</p>\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          {pokemon.types.map(type => {return <div>{type.type.name}</div>})}\n          {pokemon.abilities[0].ability.name}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport './AppBar.css'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className='typo'>\n            PokeBase\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport { getAllPokemon, getPokemon } from './api/index';\nimport './App.css';\n\n// Material Ui\nimport Button from '@material-ui/core/Button';\nimport MediaCard from './components/Card/MediaCard';\nimport AppBar from './components/AppBar/AppBar';\n\nfunction App() {\n  const [pokemonData, setPokemonData] = useState([]);\n  const [nextPage, setNextPage] = useState('');\n  const [prevPage, setPrevPage] = useState('');\n  const [loading, setLoading] = useState(true);\n  const mainUrl = \"https://pokeapi.co/api/v2/pokemon\";\n  \n  useEffect(() => {\n    async function fetchData() {\n      let response = await getAllPokemon(mainUrl);\n      setNextPage(response.next)\n      setPrevPage(response.previous);\n      await loadingPokemon(response.results)\n      setLoading(false)\n    }\n    fetchData()\n  }, [])\n\n  const fetchNext = async () => {\n    setLoading(true);\n    let data = await getAllPokemon(nextPage);\n    await loadingPokemon(data.results)\n    setNextPage(data.next);\n    setPrevPage(data.previous);\n    setLoading(false);\n  }\n  const fetchPrevious = async () => {\n    if (!prevPage) return;\n    setLoading(true);\n    let data = await getAllPokemon(prevPage);\n    await loadingPokemon(data.results)\n    setNextPage(data.next);\n    setPrevPage(data.previous);\n    setLoading(false);\n  }\n\n  const goHome = async () => {\n    setLoading(true);\n    let data = await getAllPokemon(mainUrl);\n    await loadingPokemon(data.results)\n    setNextPage(data.next);\n    setPrevPage(data.previous);\n    setLoading(false);\n  }\n\n\n  const loadingPokemon = async (data) => {\n    let singlePokemon = await Promise.all(data.map(async pokemon => {\n      let pokemonRecord = await getPokemon(pokemon.url);\n      return pokemonRecord\n    }))\n\n    setPokemonData(singlePokemon)\n    console.log(pokemonData)\n  }\n\n  return (\n    <div>\n    { loading ? <h1>Loading...</h1> : (\n      <>\n      <AppBar />\n      <div className='btns'>\n      <Button variant='contained' color='default' onClick={goHome}>Home</Button>\n      <Button variant='contained' color='secondary' onClick={fetchNext}>Next</Button>\n      <Button variant='contained' color='primary' onClick={fetchPrevious}>Previous</Button>\n      </div>\n      <div className='grid-container'>\n      {pokemonData.map((pokemon, i) => {\n        return <MediaCard key={i} pokemon={pokemon} />\n      })}\n      </div>\n\n      </>\n      )}\n      \n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}